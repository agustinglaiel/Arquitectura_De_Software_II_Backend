version: "3.8"

services:
  solr:
    container_name: solr
    image: solr
    ports:
      - "8983:8983"
    volumes:
      - ./configs/solr/managed-schema:/opt/solr/server/solr/configsets/_default/conf/managed-schema
    entrypoint:
      - docker-entrypoint.sh
      - solr-precreate
      - hotelSearch
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8983/solr/healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - backend

  memcached:
    container_name: cache
    image: memcached:1.6.16
    ports:
      - "11211:11211"
    healthcheck:
      test: ["CMD", "memcached-tool", "127.0.0.1:11211", "stats"]
      interval: 10s
      timeout: 5s
      retries: 30
    networks:
      - backend

  ficha_hotel_api:
    build: ./ficha_hotel_api
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ficha_hotel_api.rule=Host(`localhost`) && PathPrefix(`/ficha_hotel_api`)"
      - "traefik.http.services.api.loadbalancer.server.port=8080"
    depends_on:
      mongo:
        condition: service_healthy
      rabbit:
        condition: service_started
    ports:
      - "8080:8080"
    networks:
      - backend

  busqueda_hotel_api:
    build: ./busqueda_hotel_api
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.busqueda_hotel_api.rule=Host(`localhost`) && PathPrefix(`/busqueda_hotel_api`)"
      - "traefik.http.services.busqueda_hotel_api.loadbalancer.server.port=8070"
    depends_on:
      - solr
      - memcached
      - rabbit
    ports:
      - "8070:8070"
    networks:
      - backend

  mongo:
    image: mongo:4.4
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
      MONGO_INITDB_DATABASE: arqui_de_software_2
    ports:
      - "27017:27017"
    healthcheck:
      test:
        [
          "CMD",
          "mongo",
          "localhost:27017",
          "--eval",
          "db.runCommand({ ping: 1 })",
        ]
      interval: 30s
      timeout: 10s
      retries: 30
    networks:
      - backend

  rabbit:
    container_name: rabbit
    image: rabbitmq:3-management
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 1s
      timeout: 5s
      retries: 30
    networks:
      - backend

  traefik:
    image: traefik:v2.5
    container_name: traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
      - "8090:8080" # Cambiado para evitar conflicto con el puerto 8080 de la API
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - backend

networks:
  backend:

volumes:
  mongo_data:
